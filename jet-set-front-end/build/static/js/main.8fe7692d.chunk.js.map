{"version":3,"sources":["components/CityGraphics.js","components/CityContext.js","components/CityCard.js","components/CityWrapper.js","components/Utils.js","components/NavBar.js","pages/HomePage.js","components/EventCard.js","components/EventCardsWrapper.js","pages/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","temperature","wind","mesh","useRef","useState","active","setActive","useFrame","state","delta","current","rotation","y","Math","random","windToSpin","x","position","randomCoridinate","ref","scale","onClick","event","args","color","colorsFromTemp","CityGraphics","city","temp","weather","main","feels_like","windSpeed","speed","intensity","angle","penumbra","minTemp","CityContext","createContext","cityList","handleNewCity","getCityFromUrl","url","getCityUrl","useCityContext","useContext","CityProvider","children","setCityList","Provider","value","newCity","console","log","inCityList","cityNameList","split","foundCity","find","name","country","string","useStyles","makeStyles","backgroundColor","root","display","flexDirection","minHeight","padding","margin","details","zIndex","textShadow","flex","graphics","CityCard","history","useHistory","classes","locDesc","Card","className","CardActions","Button","push","CardContent","Typography","variant","component","CityWrapper","map","kelvinToFarenheit","round","eventsFromCity","fetch","then","response","json","events","catch","err","theme","createStyles","border","CustomPopper","Popper","placement","NavBar","autocompleteList","setAutocompleteList","Autocomplete","id","freeSolo","onChange","_","input_string","body","temp_min","temp_max","fixCity","onInputChange","options","style","width","renderInput","params","TextField","label","PopperComponent","nav","wrapper","HomePage","secondColumn","EventCard","venue_name","info","EventCardWrapper","eventList","CityPage","setEvents","cityIdString","useParams","useEffect","a","getEvents","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fe7692d.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n\n/*\nCubes:\nGet random number of them\n\nLighting:\nsee if you can get \n\nspinning:\nlog the wind to get a more normaized value\nscale the logged value\nadd that to the spin\n\nColors:\nSo I want a funciton that:\nTakes in a temperature\nputs it to a color\n- lets go rainbow \n    - red is hottest\n    - blue is coldest\n- get two colors that are similar to the main color\n- randomly assign those to the cubes\n*/\n\nfunction Box(props) {\n  const { temperature, wind } = props;\n  const mesh = useRef();\n  const [active, setActive] = useState(false);\n  useFrame((state, delta) => {\n    mesh.current.rotation.y += windToSpin(wind);\n    mesh.current.rotation.x = mesh.current.rotation.y / 10;\n  });\n  return (\n    <mesh\n      position={randomPosition()}\n      ref={mesh}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n    >\n      <boxGeometry args={[1.2, 1.1, 1]} />\n      <meshStandardMaterial color={colorsFromTemp(temperature)} />\n    </mesh>\n  );\n}\n\nexport function CityGraphics(props) {\n  const { city } = props;\n  const temp = city.weather.main.feels_like;\n  const windSpeed = city.weather.wind.speed;\n  return (\n    <Canvas>\n      <ambientLight intensity={0.5} />\n      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\n      <pointLight position={[-10, -10, -10]} />\n      <Box temperature={temp} wind={windSpeed} />\n      <Box temperature={temp} wind={windSpeed} />\n    </Canvas>\n  );\n}\n\nfunction randomPosition() {\n  return [randomCoridinate(), randomCoridinate() / 2, randomCoridinate()];\n}\n\nfunction randomCoridinate() {\n  return (Math.random() - 0.5) * 2;\n}\n\nfunction windToSpin(wind) {\n  return wind / 500 + Math.random() / 10;\n}\n\nfunction colorsFromTemp(temp) {\n  // https://stats.stackexchange.com/questions/281162/scale-a-number-between-a-range\n  const maxTemp = 110;\n  const minTemp = -10;\n  const maxColor = 255;\n  const minColor = 0;\n  temp += (Math.random() - 1) * 5;\n  temp = temp > maxTemp ? maxTemp : temp;\n  temp = temp < minTemp ? minTemp : temp;\n  let color =\n    (maxColor - minColor) * ((temp - minTemp) / (maxTemp - minTemp)) + minColor;\n  const avgColor = (maxColor - minColor) / 2;\n  color = (color - avgColor) * -1 + avgColor;\n  let colorString = \"hsl(\" + color + \", 100%, 50%)\";\n  return colorString;\n}\n","import { createContext, useContext, useState } from \"react\";\n\nconst CityContext = createContext({\n  cityList: [],\n  handleNewCity: (city) => {},\n  getCityFromUrl: (url) => {},\n  getCityUrl: (city) => {},\n});\n\nexport const useCityContext = () => useContext(CityContext);\n\nexport const CityProvider = ({ children }) => {\n  const [cityList, setCityList] = useState([]);\n\n  const handleNewCity = (newCity) => {\n    console.log(\"Adding new city\", newCity);\n    if (!inCityList(cityList, newCity)) setCityList([newCity, ...cityList]);\n  };\n\n  const getCityFromUrl = (url) => {\n    const cityNameList = url.split(\"-\");\n    const foundCity = cityList.find(\n      (city) =>\n        cityNameList[0] === city.name &&\n        cityNameList[1] === city.state &&\n        cityNameList[2] === city.country\n    );\n    console.log(foundCity.name);\n    return foundCity;\n  };\n  const getCityUrl = (city) => {\n    const string = \"/\" + city.name + \"-\" + city.state + \"-\" + city.country;\n    console.log(\"getting city url string: \", string);\n    return string;\n  };\n\n  return (\n    <CityContext.Provider\n      value={{\n        cityList,\n        handleNewCity,\n        getCityFromUrl,\n        getCityUrl,\n      }}\n    >\n      {children}\n    </CityContext.Provider>\n  );\n};\n\nconst inCityList = (cityList, newCity) => {\n  if (\n    cityList.find(({ name, state, country }) => {\n      return (\n        name === newCity.name &&\n        state === newCity.state &&\n        country === newCity.country\n      );\n    })\n  )\n    return true;\n  else return false;\n};\n","import { CityGraphics } from \"./CityGraphics\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { useCityContext } from \"../components/CityContext\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { useHistory } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(() => {\n  let backgroundColor = \"beige\";\n  return {\n    root: {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      minHeight: 300,\n      padding: 10,\n      margin: 20,\n      backgroundColor: backgroundColor,\n    },\n    details: {\n      position: \"absolute\",\n      zIndex: 2,\n      color: \"black\",\n      textShadow: `-1px -1px 0 ${backgroundColor}, 1px -1px 0 ${backgroundColor}, -1px 1px 0 ${backgroundColor}, 1px 1px 0 ${backgroundColor}`,\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 1,\n    },\n    graphics: {\n      position: \"relative\",\n      flex: 1,\n    },\n  };\n});\n\nexport function CityCard(props) {\n  const { city } = props;\n  const history = useHistory();\n  const classes = useStyles();\n  const { getCityUrl } = useCityContext();\n\n  const onClickRoute = () => history.push(getCityUrl(city));\n\n  let locDesc = \"\"\n  if (city.state) {\n    locDesc = city.state + \", \" + city.country\n  }\n  else {\n    locDesc = city.country\n  }\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardActions>\n          <Button onClick={onClickRoute}>{city.name}</Button>\n        </CardActions>\n        <CardContent>\n          <Typography color=\"textSecondary\">\n            {locDesc}\n          </Typography>\n          <Typography variant=\"h5\" component=\"h2\">\n            Weather\n          </Typography>\n          <Typography color=\"textSecondary\">\n            Temp: {city.weather.main.feels_like}\n          </Typography>\n          <Typography color=\"textSecondary\">\n            Wind: {city.weather.wind.speed}\n          </Typography>\n        </CardContent>\n      </div>\n      <div className={classes.graphics}>\n        <CityGraphics city={city}></CityGraphics>\n      </div>\n    </Card>\n  );\n}\n","import { CityCard } from \"./CityCard\";\nimport { useCityContext } from \"./CityContext\"\n\n\nexport function CityWrapper(props) {\n  const { cityList } = useCityContext();\n  const { className } = props;\n  return (\n    <div className={`main-flexbox ${className}`}>\n      {cityList.map((city) => (\n        <CityCard\n          key={city.name + city.state + city.country}\n          city={city}\n        ></CityCard>\n      ))}\n    </div>\n  );\n}\n","export function fixCity(city) {\n  const temp = city.weather.main;\n  temp.temp = kelvinToFarenheit(temp.temp);\n  temp.feels_like = kelvinToFarenheit(temp.feels_like);\n  temp.temp_min = kelvinToFarenheit(temp.temp_min);\n  temp.temp_max = kelvinToFarenheit(temp.temp_max);\n  return city;\n}\n\nconst kelvinToFarenheit = (temp) => Math.round((temp - 273.15) * (9 / 5) + 32);\n\nexport const eventsFromCity = (city) => {\n    console.log(\"city argument for eventsFromCity\", city)\n  return  fetch(\n    `http://localhost:4000/events?city=${city.name}&state_code=${city.state}&country_code${city.country}`\n  )\n    .then((response) => response.json())\n    .then((events) => {\n      console.log(\"Event object\", events);\n      return events;\n    })\n    .catch((err) => console.log(err));\n};\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { fixCity } from \"./Utils\";\nimport { useCityContext } from \"./CityContext\"\n\n// const fetch = require(\"node-fetch\");\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      \"& .MuiAutocomplete-listbox\": {\n        border: \"2px grey\",\n        minHeight: 200,\n        // \"& li:nth-child(even)\": { backgroundColor: \"#CCC\" },\n        // \"& li:nth-child(odd)\": { backgroundColor: \"#FFF\" },\n      },\n    },\n  })\n);\n\nconst CustomPopper = function (props) {\n  const classes = useStyles();\n  return <Popper {...props} className={classes.root} placement=\"bottom\" />;\n};\n\nexport function NavBar(props) {\n\n  const { handleNewCity } = useCityContext();\n  const [autocompleteList, setAutocompleteList] = useState([]);\n\n  const onChange = (_, input_string) => {\n    if (!input_string) return;\n    console.log(\"input string\", input_string);\n    fetch(`http://localhost:4000/cityInfo?input=${input_string}`)\n      .then((response) => response.json())\n      .then((body) => {\n        console.log(\"cityObject\", body);\n        body = fixCity(body)\n        return handleNewCity(body);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const onInputChange = (_, input_string) => {\n    fetch(`http://localhost:4000/autocomplete?input=${input_string}`)\n      .then((response) => response.json())\n      .then((body) => {\n        console.log(body);\n        setAutocompleteList(body);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <>\n      <Autocomplete\n        props\n        id=\"navbar\"\n        freeSolo={true}\n        onChange={onChange}\n        onInputChange={onInputChange}\n        options={autocompleteList}\n        style={{ width: 350, margin: 20 }}\n        renderInput={(params) => {\n          return (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Search a city...\"\n            />\n          );\n        }}\n        PopperComponent={CustomPopper}\n      />\n    </>\n  );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { CityWrapper } from \"../components/CityWrapper\";\nimport { NavBar } from \"../components/NavBar\";\n\nconst useStyles = makeStyles(() => {\n  return {\n    nav: {\n      position: \"relative\",\n      zIndex: 10,\n    },\n    wrapper: {\n      position: \"relative\",\n      zIndex: 0,\n    },\n  };\n});\n\nexport function HomePage() {\n  const classes = useStyles();\n  return (\n    <>\n      <NavBar className={classes.nav}/>\n      <CityWrapper\n        className={classes.wrapper}\n      ></CityWrapper>\n    </>\n  );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(() => {\n  let backgroundColor = \"beige\";\n  return {\n    root: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      minHeight: 300,\n      padding: 10,\n      margin: 20,\n      backgroundColor: backgroundColor,\n    },\n    details: {\n      color: \"black\",\n      textShadow: `-1px -1px 0 ${backgroundColor}, 1px -1px 0 ${backgroundColor}, -1px 1px 0 ${backgroundColor}, 1px 1px 0 ${backgroundColor}`,\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 1,\n    },\n    secondColumn: {\n      flex: 1,\n    },\n  };\n});\n\nexport function EventCard(props) {\n  const { event } = props;\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent>\n          <Typography color=\"textSecondary\">\n            {event.name}\n          </Typography>\n          <Typography color=\"textSecondary\">\n            {event.venue_name}\n          </Typography>\n        </CardContent>\n      </div>\n      <div className={classes.secondColumn}>\n        <Typography color=\"textSecondary\">Info: {event.info}</Typography>\n      </div>\n    </Card>\n  );\n}\n","import { EventCard } from \"./EventCard\";\n\nexport function EventCardWrapper(props) {\n  const { events } = props;\n  console.log(\"events in EventCardWrapper\", events)\n  const eventList = events.events || []\n  console.log(\"eventList in EventCardWrapper\", eventList)\n    return (\n      <div className={`main-flexbox `}>\n        {eventList.map((event) => (\n          <EventCard\n            key={event.url}\n            event={event}\n          ></EventCard>\n        ))}\n      </div>\n    );\n  }","import { useEffect, useState } from \"react\";\nimport { CityCard } from \"../components/CityCard\";\nimport { useCityContext } from \"../components/CityContext\";\nimport { useParams } from \"react-router-dom\";\nimport { EventCardWrapper } from \"../components/EventCardsWrapper\";\nimport { eventsFromCity } from \"../components/Utils\"\n// import { makeStyles } from \"@material-ui/core/styles\";\n\n// const useStyles = makeStyles(() => {\n//   return {\n//     nav: {\n//       position: \"relative\",\n//       zIndex: 10,\n//     },\n//     wrapper: {\n//       position: \"relative\",\n//       zIndex: 0,\n//     },\n//   };\n// });\n\nexport function CityPage(props) {\n  const [events, setEvents] = useState([]);\n  let { cityIdString } = useParams();\n  const { getCityFromUrl } = useCityContext();\n  const city = getCityFromUrl(cityIdString);\n\n  useEffect(() => {\n    const getEvents = async () => {\n      const events = await eventsFromCity(city);\n      setEvents(events);\n    }\n    getEvents();\n  }, [city]);\n\n  //   const classes = useStyles();\n  return (\n    <>\n      <CityCard city={city}></CityCard>\n      <EventCardWrapper events={events}></EventCardWrapper>\n    </>\n  );\n}\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n} from \"react-router-dom\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { CityPage } from \"./pages/CityPage\";\nimport { CityProvider } from \"./components/CityContext\";\n\nfunction App() {\n  return (\n    <CityProvider>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route exact path=\"/:cityIdString\">\n            <CityPage />\n          </Route>\n          <Route path=\"/:cityIdString/events\">\n            <div>I am a city event page</div>\n          </Route>\n        </Switch>\n      </Router>\n    </CityProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}